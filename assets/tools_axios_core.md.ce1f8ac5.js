import{_ as t,c as d,o as e,N as a}from"./chunks/framework.78c68b71.js";const f=JSON.parse('{"title":"axios二次封装","description":"","frontmatter":{},"headers":[],"relativePath":"tools/axios/core.md","lastUpdated":1675691846000}'),o={name:"tools/axios/core.md"},l=a('<h1 id="axios二次封装" tabindex="-1">axios二次封装 <a class="header-anchor" href="#axios二次封装" aria-label="Permalink to &quot;axios二次封装&quot;">​</a></h1><p><a href="https://github.com/M-cheng-web/axios-packaging" target="_blank" rel="noreferrer">项目地址 https://github.com/M-cheng-web/axios-packaging</a></p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>基于axios的二次封装,能适应大部分项目的请求需要(最起码我是这样想的,啊哈哈)<br> 本人会基于项目的实际需要来再次更新此封装,或是因为在使用中发现封装方式影响到效率和扩展也会再次更新封装</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>此封装只用到了axios,不需要其他插件 直接将此项目clone至本地,根据需要可以将项目内http文件夹移入你的项目 使用方式:</p><ol><li>通过Vue实例方式全局使用</li><li>直接在页面引入<code>http_interceptor.js</code>内的目标axios实例以及<code>api.js</code>使用</li><li>如果不引入项目只是想看一下功能,可以直接<code>npm i</code>+<code>webpack</code>命令,然后打开<code>build/index.html</code>就能看到效果</li></ol><p><strong>注意</strong></p><ol><li>通过Vue实例使用时可以通过调用时传入的config参数来覆盖其他已定义的功能</li><li>通过Vue实例使用时 http -&gt; index.js文件内是只考虑到get和post请求</li><li>此封装默认接口返回的格式是 { data: { info: &#39;我是信息&#39;, errorInfo: &#39;我是错误信息&#39;, success: true }, message: &#39;成功&#39;, messageCode: 200 }</li><li>在使用此封装之前要先和后端确定好接口返回格式</li></ol><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li>--&gt; http - 核心封装文件夹,可以直接把这个文件夹挪至你的本地项目 <ul><li>--&gt; http_axios.js - 负责创建axios默认配置和axios对象</li><li>--&gt; http_cacheRequest.js - 负责请求数据缓存,可根据自己需要改为缓存在vuex内(目前缓存在localStorage)</li><li>--&gt; http_cancelRequest.js - 负责请求取消</li><li>--&gt; http_interceptor.js - 负责请求拦截,将其他功能一并引入此文件并放入拦截器内</li><li>--&gt; http_config.js - 负责配置全局参数</li><li>--&gt; http_utils.js - 负责创建其他文件需要用到的工具函数</li><li>--&gt; index.js - 负责创建封装好的axios函数并放入Vue原型链中</li></ul></li><li>--&gt; index.js - 使用示例</li><li>--&gt; api.js - api示例</li></ul><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>请求地址</td><td>string</td><td>—</td><td>—</td></tr><tr><td>method</td><td>请求方式</td><td>string</td><td>GET / POST</td><td>GET</td></tr><tr><td>white</td><td>是否白名单(设置白名单的接口失败时不做任何处理)</td><td>boolean</td><td>true / false</td><td>false</td></tr><tr><td>withOut</td><td>是否需要接口的config数据</td><td>boolean</td><td>true / false</td><td>false</td></tr><tr><td>cancel</td><td>是否需要请求重复取消</td><td>boolean</td><td>true / false</td><td>false</td></tr><tr><td>cancelTime</td><td>设定一定时间内发生相同请求会被取消</td><td>number</td><td>—</td><td>1000</td></tr><tr><td>loading</td><td>是否显示loading</td><td>boolean</td><td>true / false</td><td>false</td></tr><tr><td>httpCache</td><td>get请求是否需要浏览器缓存</td><td>boolean</td><td>true / false</td><td>false</td></tr><tr><td>cache</td><td>是否需要缓存接口返回的数据</td><td>boolean</td><td>true / false</td><td>false</td></tr><tr><td>cacheExpire</td><td>此接口数据的缓存时间(过期后会重新请求)</td><td>number</td><td>—</td><td>10000</td></tr><tr><td>retry</td><td>接口错误时重连次数 - 0表示不重连</td><td>number</td><td>—</td><td>0</td></tr><tr><td>paramsSerial</td><td>是否post请求参数序列化</td><td>boolean</td><td>true / false</td><td>false</td></tr><tr><td>withCredentials</td><td>跨域请求时是否在请求中携带cookie</td><td>boolean</td><td>true / false</td><td>false</td></tr></tbody></table><p><strong>注意</strong></p><ol><li>设置请求缓存时,如果是get请求且设置了参数自动添加时间戳,会在存取请求缓存数据的时候忽略时间戳参数(因为它们的时间戳是不一样的会导致拿不到值),这一点在你需要自定义请求缓存是需要了解的,不会导致时间戳参数失效,平时使用是无感的</li><li>使用前尽量了解<code>http_config.js</code>文件内的参数意义,避免重复定义以及未知问题(例如时间设置太少可能会引起冲突)</li><li>loading功能需要根据你项目使用UI来自定义,我这里是假的</li></ol>',15),i=[l];function r(s,n,c,h,p,u){return e(),d("div",null,i)}const _=t(o,[["render",r]]);export{f as __pageData,_ as default};
