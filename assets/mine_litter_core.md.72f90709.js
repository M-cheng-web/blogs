import{_ as l,c as a,o as e,N as o}from"./chunks/framework.78c68b71.js";const m=JSON.parse('{"title":"随手而记","description":"","frontmatter":{},"headers":[],"relativePath":"mine/litter/core.md","lastUpdated":1678774939000}'),t={name:"mine/litter/core.md"},i=o(`<h1 id="随手而记" tabindex="-1">随手而记 <a class="header-anchor" href="#随手而记" aria-label="Permalink to &quot;随手而记&quot;">​</a></h1><h2 id="在线ps功能点" tabindex="-1">在线ps功能点 <a class="header-anchor" href="#在线ps功能点" aria-label="Permalink to &quot;在线ps功能点&quot;">​</a></h2><ul><li>吸色笔</li><li>反相颜色图片</li><li>移动图片</li><li>坐标线</li><li>缩小放大</li><li>抠图(也就是白底图)</li><li>旋转+裁剪(要带有量线)</li><li>橡皮擦</li><li>合成多个图片</li><li>调整多个图片的层级(多图层)</li><li>添加文字(双指操作等等)</li><li>添加水印 (考虑是否做暗水印)</li><li>消除笔</li><li>添加贴纸(上传图片然后以特定形状展示合成)</li><li>回退前进功能</li><li>饱和度 + 清晰度 + 亮度 + 对比度 + 色温 + 色调</li><li>滤镜</li><li>添加一些自有的动画？webgl封装的？</li><li>生成svg(是否生成动画,如果要做拼成动画的又是另外一个大类了)</li><li>转换格式</li><li>支持不同格式图片渲染,导出不同格式+生成链接的形式</li><li>压缩图片</li><li>快速选中区域</li><li>粘贴转图片</li><li>右键菜单功能</li><li>图片AI分类 (<a href="https://github.com/alibaba/pipcook" target="_blank" rel="noreferrer">https://github.com/alibaba/pipcook</a>)</li><li>图片转pdf (<a href="https://github.com/foliojs/pdfkit" target="_blank" rel="noreferrer">https://github.com/foliojs/pdfkit</a>)</li></ul><h3 id="一期" tabindex="-1">一期 <a class="header-anchor" href="#一期" aria-label="Permalink to &quot;一期&quot;">​</a></h3><ol><li>导入导出</li><li>拖动放大缩小</li><li>裁剪</li><li>回退 + 前进</li><li>反相颜色图片</li></ol><h2 id="编码-btoa-解码-atob" tabindex="-1">编码-btoa &amp; 解码-atob <a class="header-anchor" href="#编码-btoa-解码-atob" aria-label="Permalink to &quot;编码-btoa &amp; 解码-atob&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> encodedData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">btoa</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 编码</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> decodedData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">atob</span><span style="color:#A6ACCD;">(encodedData)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 解码</span></span>
<span class="line"></span></code></pre></div><h2 id="本地端口操作" tabindex="-1">本地端口操作 <a class="header-anchor" href="#本地端口操作" aria-label="Permalink to &quot;本地端口操作&quot;">​</a></h2><ul><li>查看: sudo lsof -i:<code>8080</code></li><li>终止: sudo kill -9 <code>&lt;pid&gt;</code></li></ul><h2 id="ng" tabindex="-1">ng <a class="header-anchor" href="#ng" aria-label="Permalink to &quot;ng&quot;">​</a></h2><ul><li>启动: sudo nginx</li><li>重启: sudo nginx -s reload</li><li>停止: sudo nginx -s stop</li><li>打开配置地址: 控制台 nginx -h, 然后command + 最后一位地址</li></ul><h2 id="vuepress-图标地址" tabindex="-1">vuepress 图标地址 <a class="header-anchor" href="#vuepress-图标地址" aria-label="Permalink to &quot;vuepress 图标地址&quot;">​</a></h2><p><a href="https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/full.json" target="_blank" rel="noreferrer">https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/full.json</a></p><h2 id="mk文档输出目录树" tabindex="-1">mk文档输出目录树 <a class="header-anchor" href="#mk文档输出目录树" aria-label="Permalink to &quot;mk文档输出目录树&quot;">​</a></h2><p>mddir</p><p><a href="https://www.cnblogs.com/xulinjun/p/13932609.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/xulinjun/p/13932609.html</a></p><h2 id="click-touchstart" tabindex="-1">click &amp; touchstart <a class="header-anchor" href="#click-touchstart" aria-label="Permalink to &quot;click &amp; touchstart&quot;">​</a></h2><h3 id="前置知识点" tabindex="-1">前置知识点 <a class="header-anchor" href="#前置知识点" aria-label="Permalink to &quot;前置知识点&quot;">​</a></h3><ul><li>click 点击事件,在H5中会有 <code>300ms</code> 的延迟 ( 为了判断双击事件 )</li><li>touchstart 手触碰元素事件,手在放上去时就会立即触发</li><li>touchmove 手移动事件</li><li>touchend 手放开事件</li><li>prevent 修饰符,阻止默认事件( 上面几个事件添加此修饰符会使click事件失效 )</li><li>stop 修饰符,阻止事件冒泡</li></ul><h3 id="事件的-捕获阶段-触发阶段" tabindex="-1">事件的 捕获阶段 &amp; 触发阶段 <a class="header-anchor" href="#事件的-捕获阶段-触发阶段" aria-label="Permalink to &quot;事件的 捕获阶段 &amp; 触发阶段&quot;">​</a></h3><ol><li>事件的捕获阶段 在事件的捕获阶段时从最外层的祖先元素,向目标元素进行实践的捕获,但是默认此时不会触发事件</li><li>事件的目标阶段 事件捕获到目标元素,捕获结束开始在目标元素上触发事件</li><li>事件的冒泡阶段 事件从目标元素向它的祖先元素传递,分别依次触发祖先元素上的事件</li><li>如果希望在捕获阶段就出发事件,可以将 <code>addEventListener()</code> 中第三个参数设置为true ( 一般情况下我们不会希望在补货阶段出发事件,所以这个参数一般都是false )</li></ol><blockquote><p>在IE8及以下的浏览器中没有捕获阶段</p></blockquote><h3 id="场景描述" tabindex="-1">场景描述 <a class="header-anchor" href="#场景描述" aria-label="Permalink to &quot;场景描述&quot;">​</a></h3><p>目前我们需要在一个 <code>div</code> 上添加手动拖动需求以及点击需求,可以联想到的是 <code>click / touchstart / touchmove / touchend</code> 这几个事件来满足上诉需求,目前遇到的问题是,我们给元素附上 <code>@touchstart.prevent.stop=&quot;handleTouchStart&quot;</code> 事件</p><p>已知的问题是:</p><ol><li><code>click</code> 事件会被 <code>prevent</code> 修饰符给弄失效</li><li><code>click</code> 事件在第一次点击元素时不会触发 (因为 <code>touchstart.stop</code>,去掉 <code>stop</code> 就没有这种问题,具体我这边也不清楚为什么)</li><li>不只是针对于 <code>@touchstart</code>,目前即使不给 <code>@touchstart</code> 事件添加 <code>prevent &amp; stop</code>,给 <code>touchend</code> 添加这俩个修饰符也会导致同样的问题 (点击元素没有移动不会触发 <code>touchmove</code>,所以给移动事件添加那俩修饰符不会影响 <code>click</code>事件,理论上如果移动了就会影响到 <code>click</code>,但是按照实际场景移动了本身就不用触发点击事件~)</li></ol><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><ol><li>去除 <code>touchstart &amp; touchend</code> 的 <code>prevent &amp; stop</code> 俩修饰符, 添加 <code>@click.prevent.stop</code> ( 但是这样的话还会有300ms延迟,这是不可控的 )</li><li>通过 <code>touchstart</code> 与 <code>touchend</code> 的时间间隔来判断用户是否点击,延迟时间也是完全可控的</li></ol><h2 id="uniapp" tabindex="-1">uniapp <a class="header-anchor" href="#uniapp" aria-label="Permalink to &quot;uniapp&quot;">​</a></h2><ul><li>click.stop 是无效的, 要用 click.native.stop</li><li>input type = number 时, 设置 maxlength 会出错,但是不报错 (在支付宝小程序)</li><li>没有改动 (由于支付宝不支持formdata格式且 uni.uploadFile 的 filePath 是必传的,所以只能用另外一个接口)</li><li>uniapp 原生输入框在支付宝小程序有闪动问题,用uview的组件好一些</li><li>假冒的 tabbar, 如果在所有的 pages 定义之前加了个额外的登录也,那么 switchto 这种是不能正常使用了,只能当做正常的页面跳转,否则会出现底部会空出一个 tabbar 栏的高度 (但是在安卓端是没问题的,ios端看支付宝小程序才有问题)</li><li>textarea focus 属性内部是watch 的，如果本身为true再次置为true是不会触发获取焦点的</li><li>通过路由跳转传参的 布尔值会转化为 字符串</li><li>new date(&#39;2000-12-04&#39;) 这样的方式可能会失败，这样的格式能保证成功 &#39;2000/12/04&#39;</li></ul><p>// ios screenWidth 是正常的, 安卓端 screenWidth 是不正常的,所以用 windowWidth // const screenWidth = uni.getSystemInfoSync().screenWidth;</p>`,31),s=[i];function c(n,r,d,p,h,u){return e(),a("div",null,s)}const k=l(t,[["render",c]]);export{m as __pageData,k as default};
