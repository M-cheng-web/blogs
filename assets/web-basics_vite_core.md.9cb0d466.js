import{_ as l,c as e,o as a,N as s}from"./chunks/framework.78c68b71.js";const v=JSON.parse('{"title":"vite","description":"","frontmatter":{},"headers":[],"relativePath":"web-basics/vite/core.md","lastUpdated":1675691846000}'),t={name:"web-basics/vite/core.md"},o=s(`<h1 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h1><blockquote><p>此章节是本人对 掘金小册-vite深入浅出 的总结笔记</p></blockquote><h2 id="学习问题" tabindex="-1">学习问题 <a class="header-anchor" href="#学习问题" aria-label="Permalink to &quot;学习问题&quot;">​</a></h2><ol><li>esbuild的插件执行顺序</li></ol><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><p>安装 pnpm 后,执行下面的命令,选择相对应的框架即可自动生产</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm create vite</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="vite-的大概实现" tabindex="-1">vite 的大概实现 <a class="header-anchor" href="#vite-的大概实现" aria-label="Permalink to &quot;vite 的大概实现&quot;">​</a></h2><p>预构建</p><ul><li>Vite 1.x 版本中使用 Rollup 来做这件事</li><li>Vite 2.x 果断采用 Esbuild 来完成第三方依赖的预构建</li></ul><p>Esbuild 存在的几个缺陷</p><ul><li>不支持降级到 es5 的代码，这意味着在低端浏览器跑不起来</li><li>不提供操作打包产物的接口，Esbuild 的打包极简化，并不像 rollup 一样灵活</li><li>不支持自定义代码分割</li></ul><p><strong>所以 vite 的思路是：在开发环境用 Esbuild 编译打包，在生产环境用 rollup 打包</strong></p><h3 id="esbuild-在-vite-中的作用" tabindex="-1">Esbuild 在 vite 中的作用 <a class="header-anchor" href="#esbuild-在-vite-中的作用" aria-label="Permalink to &quot;Esbuild 在 vite 中的作用&quot;">​</a></h3><ol><li>对于第三方依赖，会将非 ESM 格式转换为 ESM 格式 (开发阶段用这个，生产环境用 rollup稳定)</li><li>作为 TS 和 JSX 的编译工具 (生产环境)</li></ol><p>在对这些文件的编译时 vite 会使用 Esbuild 进行语法转译，也就是将 Esbuild 作为 Transformer 来用，但是并不支持 TS 的类型检查，也就是 Esbuild 并没有实现 ts 的类型检查，所以在编译时仅仅抹掉了类型相关的代码，暂时没有能力实现类型检查，因此 <code>vite build</code> 之前会先执行tsc命令，也就是借助 TS 官方的编译器进行类型检查</p><ol start="3"><li>代码压缩 (生产环境)</li></ol><blockquote><p>Vite 从 2.6 版本开始，默认使用 Esbuild 来进行生产环境的代码压缩 (包括 JS 代码和 CSS 代码)</p></blockquote><p>传统压缩方式（webpack，rollup）都是使用 Terser 这种 JS 开发的压缩库进行压缩，但是其有两个大缺陷</p><ul><li>压缩涉及大量的 AST 操作，但是 AST 无法在各个工具之间共享，比如 Terser 无法与 babel 共享同一个 AST，造成了很多重复解析过程</li><li>JS 性能比不上 Golang 这种原生语言</li></ul><p><strong>针对以上情况进行实际测试会发现 Esbuild 的压缩速度是传统方式的 20 倍</strong></p><h3 id="rollup-在-vite-中的作用" tabindex="-1">Rollup 在 vite 中的作用 <a class="header-anchor" href="#rollup-在-vite-中的作用" aria-label="Permalink to &quot;Rollup 在 vite 中的作用&quot;">​</a></h3><p>生产环境打包</p><ul><li>css 代码分割（提高缓存复用率）</li><li>自动为入口 chunk 添加预加载</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--  自动预加载入口 chunk 所依赖的 chunk--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modulepreload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/assets/vendor.293dca09.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li>异步 chunk 加载优化 一般情况下，Rollup 打包之后，会先请求 A，然后浏览器在加载 A 的过程中才决定请求和加载 C，但 Vite 进行优化之后，请求 A 的同时会自动预加载 C，通过优化 Rollup 产物依赖加载方式节省了不必要的网络开销</li></ul><h3 id="兼容插件机制" tabindex="-1">兼容插件机制 <a class="header-anchor" href="#兼容插件机制" aria-label="Permalink to &quot;兼容插件机制&quot;">​</a></h3><p>在开发阶段，Vite 借鉴了 WMR 的思路，自己实现了一个 Plugin Container，用来模拟 Rollup 调度各个 Vite 插件的执行逻辑，而 Vite 的插件写法完全兼容 Rollup，因此在生产环境中将所有的 Vite 插件传入 Rollup 也没有问题</p><p><strong>反过来说，Rollup 插件却不一定能完全兼容 Vite</strong></p>`,29),i=[o];function n(p,r,c,u,d,h){return a(),e("div",null,i)}const _=l(t,[["render",n]]);export{v as __pageData,_ as default};
