import{_ as e,c as a,o as t,N as s}from"./chunks/framework.78c68b71.js";const P=JSON.parse('{"title":"nestjs","description":"","frontmatter":{},"headers":[],"relativePath":"server/nestjs/core.md","lastUpdated":1678772179000}'),r={name:"server/nestjs/core.md"},l=s(`<h1 id="nestjs" tabindex="-1">nestjs <a class="header-anchor" href="#nestjs" aria-label="Permalink to &quot;nestjs&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>目前只在写了demo和简单的项目，后面熟悉了再系统复习总结</p></div><p><a href="https://docs.nestjs.cn/8/introduction" target="_blank" rel="noreferrer">nest 中文文档</a></p><p>问题</p><ol><li>Controller 中 host 有什么用 (子域路由)</li><li>RxJS observable 流是什么，异步章节</li><li>模板代码生成器 <a href="https://docs.nestjs.cn/8/recipes?id=crud%e7%94%9f%e6%88%90%e5%99%a8" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/recipes?id=crud生成器</a></li><li>管道是什么</li><li>拦截器，守卫，中间件关系</li></ol><p>练习</p><ol><li>爬虫</li><li>用户创建+登录</li><li>用户增删改查</li></ol><h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 安装全局nest脚手架</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i -g @nestjs/cli</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 创建nest项目</span></span>
<span class="line"><span style="color:#A6ACCD;">nest new project-name</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 执行</span></span>
<span class="line"><span style="color:#A6ACCD;">npm run start:dev</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 打开端口</span></span>
<span class="line"><span style="color:#A6ACCD;">http://localhost:3000/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="控制器-controller" tabindex="-1">控制器 Controller <a class="header-anchor" href="#控制器-controller" aria-label="Permalink to &quot;控制器 Controller&quot;">​</a></h2><p>使用 <code>nest g controller cats</code> 来创建一个<code>cats</code>控制器（我这边没有效果）</p><p>常用请求头装饰器</p><table><thead><tr><th>完整</th><th>缩写</th></tr></thead><tbody><tr><td>@Request()，@Req()</td><td>req</td></tr><tr><td>@Response()，@Res()*</td><td>res</td></tr><tr><td>@Next()</td><td>next</td></tr><tr><td>@Session()</td><td>req.session</td></tr><tr><td>@Param(key?: string)</td><td>req.params/req.params[key]</td></tr><tr><td>@Body(key?: string)</td><td>req.body/req.body[key]</td></tr><tr><td>@Query(key?: string)</td><td>req.query/req.query[key]</td></tr><tr><td>@Headers(name?: string)</td><td>req.headers/req.headers[name]</td></tr><tr><td>@Ip()</td><td>req.ip</td></tr><tr><td>@HostParam()</td><td>req.hosts</td></tr></tbody></table><p>Nest 为所有标准的 HTTP 方法提供了相应的装饰器：@Put()、@Delete()、@Patch()、@Options()、以及 @Head()。此外，@All() 则用于定义一个用于处理所有 HTTP 请求方法的处理程序。</p><h2 id="提供者-providers" tabindex="-1">提供者 Providers <a class="header-anchor" href="#提供者-providers" aria-label="Permalink to &quot;提供者 Providers&quot;">​</a></h2><h2 id="模块-module" tabindex="-1">模块 Module <a class="header-anchor" href="#模块-module" aria-label="Permalink to &quot;模块 Module&quot;">​</a></h2><p>@module() 装饰器接受一个描述模块属性的对象：</p><ul><li>providers 由 Nest 注入器实例化的提供者，并且可以至少在整个模块中共享</li><li>controllers 必须创建的一组控制器</li><li>imports 导入模块的列表，这些模块导出了此模块中所需提供者</li><li>exports 由本模块提供并应在其他模块中可用的提供者的子集。</li></ul><h2 id="中间件" tabindex="-1">中间件 <a class="header-anchor" href="#中间件" aria-label="Permalink to &quot;中间件&quot;">​</a></h2><p>forRoutes() 可接受一个字符串、多个字符串、对象、一个控制器类甚至多个控制器类</p><p>apply() 方法可以使用单个中间件，也可以使用多个参数来指定多个多个中间件</p><h2 id="异常过滤器" tabindex="-1">异常过滤器 <a class="header-anchor" href="#异常过滤器" aria-label="Permalink to &quot;异常过滤器&quot;">​</a></h2><p>内置的异常层负责处理整个应用程序中的所有抛出的异常。当捕获到未处理的异常时，最终用户将收到友好的响应。</p><h2 id="管道" tabindex="-1">管道 <a class="header-anchor" href="#管道" aria-label="Permalink to &quot;管道&quot;">​</a></h2><p>Nest 自带八个开箱即用的管道，即</p><p>ValidationPipe ParseIntPipe ParseBoolPipe ParseArrayPipe ParseUUIDPipe DefaultValuePipe ParseEnumPipe ParseFloatPipe</p><h2 id="守卫" tabindex="-1">守卫 <a class="header-anchor" href="#守卫" aria-label="Permalink to &quot;守卫&quot;">​</a></h2><p>守卫在每个中间件之后执行，但在任何拦截器或管道之前执行。</p>`,28),n=[l];function o(p,i,d,c,h,u){return t(),a("div",null,n)}const q=e(r,[["render",o]]);export{P as __pageData,q as default};
