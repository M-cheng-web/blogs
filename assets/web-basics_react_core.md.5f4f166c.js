import{_ as e,c as t,o as a,N as r}from"./chunks/framework.78c68b71.js";const f=JSON.parse('{"title":"React 基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"web-basics/react/core.md","lastUpdated":1678764567000}'),s={name:"web-basics/react/core.md"},o=r(`<h1 id="react-基础知识" tabindex="-1">React 基础知识 <a class="header-anchor" href="#react-基础知识" aria-label="Permalink to &quot;React 基础知识&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>react还没有系统学习，这边就很简陋了</p></div><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h2><h3 id="react-和-vue-区别" tabindex="-1">react 和 vue 区别 <a class="header-anchor" href="#react-和-vue-区别" aria-label="Permalink to &quot;react 和 vue 区别&quot;">​</a></h3><ol><li>vue (这一点在数据的监听上可以发现不同,vue中只用关心数据的赋值,具体怎么)</li><li>vue 中我们组合不同功能的方式是通过 mixin,而在 react 中我们通过 hoc</li><li>组件传值不同,子组件向父组件传递消息有两种方式: 事件和回调函数,vue更倾向于使用事件, 但是在 React 中都是使用回调函数的</li><li>vue有 v-model 语法糖等</li></ol><h3 id="react无状态组件和class类组件的区别" tabindex="-1">react无状态组件和class类组件的区别 <a class="header-anchor" href="#react无状态组件和class类组件的区别" aria-label="Permalink to &quot;react无状态组件和class类组件的区别&quot;">​</a></h3><ol><li>函数组件代码量较少，相比类组件更加简洁</li><li>函数组件看似只是一个返回react元素的函数，其实体现的是无状态组件的思想，函数组件中没有this， 没有state，也没有生命周期</li><li>因为函数组件不需要考虑组件状态和组件生命周期方法中的各种比较校验，所以有很大的性能提升空间</li></ol><h3 id="react-usecontext" tabindex="-1">react useContext <a class="header-anchor" href="#react-usecontext" aria-label="Permalink to &quot;react useContext&quot;">​</a></h3><h3 id="react怎么做鉴权系统" tabindex="-1">react怎么做鉴权系统 <a class="header-anchor" href="#react怎么做鉴权系统" aria-label="Permalink to &quot;react怎么做鉴权系统&quot;">​</a></h3><p>重点复习</p><h3 id="高阶组件" tabindex="-1">高阶组件 <a class="header-anchor" href="#高阶组件" aria-label="Permalink to &quot;高阶组件&quot;">​</a></h3><p>重点复习</p><h3 id="react-和-vue-的-diff-算法区别" tabindex="-1">react 和 vue 的 diff 算法区别 <a class="header-anchor" href="#react-和-vue-的-diff-算法区别" aria-label="Permalink to &quot;react 和 vue 的 diff 算法区别&quot;">​</a></h3><p>重点复习</p><h3 id="react-class-与-hooks-组件生命周期对比" tabindex="-1">react class 与 hooks 组件生命周期对比 <a class="header-anchor" href="#react-class-与-hooks-组件生命周期对比" aria-label="Permalink to &quot;react class 与 hooks 组件生命周期对比&quot;">​</a></h3><table><thead><tr><th>class组件</th><th>Hooks组件</th></tr></thead><tbody><tr><td>constructor</td><td>useState</td></tr><tr><td>getDerivedStateFromProps</td><td>useState 中的 update 函数</td></tr><tr><td>shouldComponentUpdate</td><td>useMemo</td></tr><tr><td>render</td><td>函数返回值</td></tr><tr><td>componentDidMount</td><td>useEffect</td></tr><tr><td>componentDidUpdate</td><td>useEffect</td></tr><tr><td>componentWillUnmount</td><td>useEffect内返回的函数</td></tr><tr><td>componentDidCatch</td><td>无</td></tr><tr><td>getDerivedStateFromError</td><td>无</td></tr></tbody></table><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><p>挂载阶段:</p><ul><li>constructor: 构造函数,最先被执行,通常在构造函数里初始化state对象或者给自定义方法绑定this</li><li>getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState),当我们接收到新的属性想去修改我们state可以使用这个,在调用 render 方法之前调用,并且在初始挂载及后续更新时都会被调用</li><li>render: render函数是纯函数,只返回需要渲染的东西,不应该包含其它的业务逻辑,可以返回原生的DOM、React组件</li><li>componentDidMount: 组件装载之后调用,此时我们可以获取到DOM节点并操作,比如对canvas,svg的操作,服务器请求,订阅都可以写在这个里面,但是记得在componentWillUnmount中取消订阅</li></ul><p>更新阶段:</p><ul><li>getDerivedStateFromProps: 此方法在更新个挂载阶段都可能会调用</li><li>shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState),有两个参数nextProps和nextState表示新的属性和变化之后的state,返回一个布尔值,true表示会触发重新渲染，false表示不会触发重新渲染,默认返回true,我们通常利用此生命周期来优化React程序性能</li><li>render: 更新阶段也会触发此生命周期</li><li>getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState),这个方法在render之后,componentDidUpdate之前调用,有两个参数prevProps和prevState表示之前的属性和之前的state,这个函数有一个返回值,会作为第三个参数传给componentDidUpdate,如果你不想要返回值,可以返回null,此生命周期必须与componentDidUpdate搭配使用</li><li>componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot),该方法在getSnapshotBeforeUpdate方法之后被调用,有三个参数prevProps,prevState,snapshot,表示之前的props,之前的state,和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要用到 DOM 元素的状态,则将对比或计算的过程迁移至 getSnapshotBeforeUpdate,然后在 componentDidUpdate 中统一触发回调或更新状态</li></ul><p>卸载阶段: componentWillUnmount: 在组件卸载及销毁之前直接调用</p><h3 id="react中setstate做了什么" tabindex="-1">React中setState做了什么 <a class="header-anchor" href="#react中setstate做了什么" aria-label="Permalink to &quot;React中setState做了什么&quot;">​</a></h3><p>setState不会立刻改变react组件中state的值,多次setState函数调用产生的效果会合并,会构建一个新的react元素树,为了弄清 UI 如何响应新的状态而改变,React 会将这个新树与上一个元素树相比较 (这个过程可能是 react 的 diff 算法)</p><h3 id="redux-thunk-redux-saga有什么作用" tabindex="-1">redux-thunk redux-saga有什么作用 <a class="header-anchor" href="#redux-thunk-redux-saga有什么作用" aria-label="Permalink to &quot;redux-thunk redux-saga有什么作用&quot;">​</a></h3><p>redux-thunk就是dispatch一个action之后,到达reducer之前,进行一些额外的操作,用来异步操作,比如接口请求等</p><p>redux-saga通过创建sagas将所有异步操作逻辑收集在一个地方集中处理,可以用来代替redux-thunk中间件</p><h3 id="react中如何做性能优化" tabindex="-1">React中如何做性能优化 <a class="header-anchor" href="#react中如何做性能优化" aria-label="Permalink to &quot;React中如何做性能优化&quot;">​</a></h3><p>优化关键 shouldComponentUpdate: 有俩个参数,一个是nextProps,另一个是nextState,而我们就用这俩个上一次的props和state与这一次的props和state去做比较,如果俩者相同那么就return false 不让它进行更新就可以了,传参优化以及key值合理使用</p><h3 id="react如何做到和vue中keep-alive的缓存效果" tabindex="-1">react如何做到和vue中keep-alive的缓存效果 <a class="header-anchor" href="#react如何做到和vue中keep-alive的缓存效果" aria-label="Permalink to &quot;react如何做到和vue中keep-alive的缓存效果&quot;">​</a></h3><ul><li>react-keep-alive 库</li><li>react-activation 库</li></ul><h3 id="react中要实现一键换ui样式有哪些方案" tabindex="-1">react中要实现一键换ui样式有哪些方案 <a class="header-anchor" href="#react中要实现一键换ui样式有哪些方案" aria-label="Permalink to &quot;react中要实现一键换ui样式有哪些方案&quot;">​</a></h3><ol><li>准备不同主题色的样式文件</li><li>将用户的选择记录在本地缓存中</li><li>每次进入应用时读取缓存,根据缓 存的信息判断要加载哪个样式文件即可</li></ol><h3 id="路由监听" tabindex="-1">路由监听 <a class="header-anchor" href="#路由监听" aria-label="Permalink to &quot;路由监听&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">componentDidMount(){</span></span>
<span class="line"><span style="color:#A6ACCD;">  this.context.router.history.listen(route =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    if(route.pathname === &#39;/xxx&#39;) { console.log(1) }</span></span>
<span class="line"><span style="color:#A6ACCD;">  })</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="react有哪几种方式改变state" tabindex="-1">react有哪几种方式改变state <a class="header-anchor" href="#react有哪几种方式改变state" aria-label="Permalink to &quot;react有哪几种方式改变state&quot;">​</a></h3><ul><li>this.forceUpdate</li><li>this.setState</li><li>replaceState (替换作用)</li></ul><p>forceUpdate就是重新render,有些变量不在state上,但是又想达到这个变量更新的时候刷新render;或者state里的某个变量层次太深更新的时候没有自动触发render,这些时候都可以手动调用forceUpdate自动触发render</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">create-react-app react-demo</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">npx create-react-app react-demo</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">npx create-react-app react_ts_demo  --template typescript</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,40),l=[o];function n(c,i,p,d,h,u){return a(),t("div",null,l)}const b=e(s,[["render",n]]);export{f as __pageData,b as default};
