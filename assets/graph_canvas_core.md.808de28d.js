import{_ as a,c as l,o as e,N as s}from"./chunks/framework.78c68b71.js";const D=JSON.parse('{"title":"canvas","description":"","frontmatter":{},"headers":[],"relativePath":"graph/canvas/core.md","lastUpdated":1675691846000}'),t={name:"graph/canvas/core.md"},n=s(`<h1 id="canvas" tabindex="-1">canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;canvas&quot;">​</a></h1><h2 id="待完成效果" tabindex="-1">待完成效果 <a class="header-anchor" href="#待完成效果" aria-label="Permalink to &quot;待完成效果&quot;">​</a></h2><ul><li>刮刮乐(待完善)</li><li>签名功能</li></ul><h2 id="基础api" tabindex="-1">基础api <a class="header-anchor" href="#基础api" aria-label="Permalink to &quot;基础api&quot;">​</a></h2><ul><li>moveTo() 移动画笔，一开始就需要加上的</li><li>stroke() 使图形闭合，只有闭合了才能显现出之前画的图形</li><li>beginPath() 新建一条路径，也就是重开一个绘画</li><li>closePath() 闭合绘画，如果是半圆添加了闭合也会把口封掉</li><li>fill() 与上同理，但是会填充</li><li>fillStyle = &#39;red&#39; 设置填充色</li><li>fillRect() 设置填充块</li><li>clearRect() 清除一片区域</li></ul><h3 id="绘制api" tabindex="-1">绘制api <a class="header-anchor" href="#绘制api" aria-label="Permalink to &quot;绘制api&quot;">​</a></h3><ul><li>描边 stroke() strokeRect() strokeStyle() strokeText()</li><li>填充 fill() fillRect() fillStyle() fillText()</li><li>闭合 closePath()</li><li>清空 clearRect()</li></ul><h2 id="小知识点" tabindex="-1">小知识点 <a class="header-anchor" href="#小知识点" aria-label="Permalink to &quot;小知识点&quot;">​</a></h2><h3 id="beginpath-与-closepath-的区别" tabindex="-1">beginPath 与 closePath 的区别 <a class="header-anchor" href="#beginpath-与-closepath-的区别" aria-label="Permalink to &quot;beginPath 与 closePath 的区别&quot;">​</a></h3><p>canvas 的绘制方法(比如stroke,fill)会以 <code>beginPath</code> 为分割线，在 beginPath 之前的语法并不会计入绘制，只会从 beginPath 之后开始绘制，而这就要求 beginPath 之前的语法要自己先绘制(否则会无效不显示)</p><p>这也意味着如果想分段绘制的话没有 beginPath 是实现不了的(当然可以用 save)</p><blockquote><p>beginPath 和 closePath 没有任何关系，一个是用来开启新绘制，一个是用户给图像闭合</p></blockquote><h3 id="canvas-在不支持其平台的体现效果是直接体现内容-比如" tabindex="-1">canvas 在不支持其平台的体现效果是直接体现内容，比如 <a class="header-anchor" href="#canvas-在不支持其平台的体现效果是直接体现内容-比如" aria-label="Permalink to &quot;canvas 在不支持其平台的体现效果是直接体现内容，比如&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">canvas</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">200</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">200</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  当前浏览器不支持canvas元素，请升级或更换浏览器！</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">canvas</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li><p>translate 要在 arc 或者 fillRect 这种之前才有效</p></li><li><p>beginPath 更新不了旋转位移</p></li></ul>`,15),o=[n];function i(c,r,p,h,d,u){return e(),l("div",null,o)}const _=a(t,[["render",i]]);export{D as __pageData,_ as default};
