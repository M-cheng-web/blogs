import{_ as s,c as a,o as l,N as n}from"./chunks/framework.78c68b71.js";const D=JSON.parse('{"title":"webpack","description":"","frontmatter":{},"headers":[],"relativePath":"web-basics/webpack/core.md","lastUpdated":1676302342000}'),e={name:"web-basics/webpack/core.md"},p=n(`<h1 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此模板还配置了类似于 vue-cli 对于多种环境变量的使用,在最底部有介绍</p></div><h2 id="模板地址" tabindex="-1">模板地址 <a class="header-anchor" href="#模板地址" aria-label="Permalink to &quot;模板地址&quot;">​</a></h2><p><a href="https://github.com/M-cheng-web/template-webpack" target="_blank" rel="noreferrer">https://github.com/M-cheng-web/template-webpack</a></p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">|-- example-webpack</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- .eslintrc.js (eslint 配置文件)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- .gitignore</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- yarn.lock</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- config (webpack配置项及环境变量)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- .env.development</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- .env.production</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- .env.test</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- define-properties.js</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- webpack.config.base.js (基础配置)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- webpack.config.dev.js (dev配置)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |   |-- webpack.config.prod.js (prod配置)</span></span>
<span class="line"><span style="color:#A6ACCD;">    |-- src (被打包模块)</span></span>
<span class="line"><span style="color:#A6ACCD;">        |-- index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">        |-- css</span></span>
<span class="line"><span style="color:#A6ACCD;">        |   |-- index.css</span></span>
<span class="line"><span style="color:#A6ACCD;">        |   |-- index.less</span></span>
<span class="line"><span style="color:#A6ACCD;">        |-- img</span></span>
<span class="line"><span style="color:#A6ACCD;">        |   |-- angular.jpg</span></span>
<span class="line"><span style="color:#A6ACCD;">        |   |-- react.png</span></span>
<span class="line"><span style="color:#A6ACCD;">        |-- js</span></span>
<span class="line"><span style="color:#A6ACCD;">            |-- demo.js</span></span>
<span class="line"><span style="color:#A6ACCD;">            |-- index.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="loader-plugin" tabindex="-1">loader &amp; plugin <a class="header-anchor" href="#loader-plugin" aria-label="Permalink to &quot;loader &amp; plugin&quot;">​</a></h2><p>loader 用于对模块的&quot;源代码&quot;进行转换，在 import 或&quot;加载&quot;模块时预处理文件 例如:</p><ul><li>css-loader :允许将css文件通过require的方式引入，并返回css代码</li><li>less-loader: 处理less</li><li>sass-loader: 处理sass</li><li>html-minify-loader: 压缩HTML</li></ul><p>plugin赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在 webpack 的不同阶段（钩子 / 生命周期），贯穿了webpack整个编译周期(简单理解为针对于webpack的扩展) 例如</p><ul><li>HtmlWebpackPlugin :在打包结束后，⾃动生成⼀个 html ⽂文件，并把打包生成的js 模块引⼊到该 html 中</li><li>mini-css-extract-plugin :提取 CSS 到一个单独的文件中</li></ul><p>两者在运行时机上的区别</p><ul><li>loader 运行在打包文件之前</li><li>plugins 在整个编译周期都起作用</li></ul><h2 id="基础配置" tabindex="-1">基础配置 <a class="header-anchor" href="#基础配置" aria-label="Permalink to &quot;基础配置&quot;">​</a></h2><ul><li>打包样式</li><li>打包html</li><li>打包图片</li><li>打包其他资源</li><li>devserver</li></ul><h2 id="生产配置" tabindex="-1">生产配置 <a class="header-anchor" href="#生产配置" aria-label="Permalink to &quot;生产配置&quot;">​</a></h2><ul><li>css 提取为单独文件</li><li>css 兼容性处理 (需要在 package.json 中定义 browserslist 来明确开发环境和生产环境的兼容度)</li><li>css 压缩</li><li>eslint</li><li>js 兼容性处理 (这里用的是 corejs 来保证兼容)</li><li>js 压缩</li><li>html 压缩</li></ul><h3 id="css-压缩" tabindex="-1">css 压缩 <a class="header-anchor" href="#css-压缩" aria-label="Permalink to &quot;css 压缩&quot;">​</a></h3><p>mode = production 模式时,<br> html 和 js 都会自动压缩,但是 css 不会压缩,所以需要专门的css压缩库,<br> 而且它可以合并相同的 css 类或者 id, 也能删除空的 css 类</p><h3 id="eslint" tabindex="-1">eslint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;eslint&quot;">​</a></h3><p>这里是用 eslint-webpack-plugin 插件<br> 步骤: 根目录创建 .eslintrc.js 并在其内编写eslint 规则<br> 使用airbnb,需要安装 eslint-config-airbnb-base eslint-plugin-import eslint</p><h3 id="js-兼容性" tabindex="-1">js 兼容性 <a class="header-anchor" href="#js-兼容性" aria-label="Permalink to &quot;js 兼容性&quot;">​</a></h3><ol><li>基本js兼容性处理 --&gt; @babel/preset-env<br> 问题: 只能转换基本语法,如promise高级语法不能转换</li><li>全部js兼容性处理 --&gt; @babel/polyfill<br> 问题: 我只要解决部分兼容性问题,但是将所有兼容性代码全部引入,体积太大了~</li><li>需要做兼容性处理的就做：按需加载 --&gt; core-js</li></ol><h2 id="优化配置" tabindex="-1">优化配置 <a class="header-anchor" href="#优化配置" aria-label="Permalink to &quot;优化配置&quot;">​</a></h2><ul><li>组件重复打包</li><li>热更新</li><li>source-map</li><li>oneOf</li><li>babel缓存</li><li>tree-shaking</li><li>code-split</li><li>懒加载 &amp; 预加载</li><li>多进程打包</li><li>externals (排查某些文件不打包)</li><li>dll</li><li>优先处理</li></ul><h3 id="组件重复打包" tabindex="-1">组件重复打包 <a class="header-anchor" href="#组件重复打包" aria-label="Permalink to &quot;组件重复打包&quot;">​</a></h3><p>假设A.js文件是一个常用的库，现在有多个路由使用了A.js文件，这就造成了重复下载</p><p>解决方案：在webpack的config文件中，修改CommonsChunkPlugin的配置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">minChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"></span></code></pre></div><p>minChunks为3表示会把使用3次及以上的包抽离出来，放进公共依赖文件，避免了重复加载组件</p><h3 id="热更新" tabindex="-1">热更新 <a class="header-anchor" href="#热更新" aria-label="Permalink to &quot;热更新&quot;">​</a></h3><p>当一个模块发生变化,只会重新打包这一个模块,极大提升构建速度</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">port</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 开启HMR功能</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当修改了webpack配置,新配置要想生效,必须重启webpack服务</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">hot</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="source-map" tabindex="-1">source-map <a class="header-anchor" href="#source-map" aria-label="Permalink to &quot;source-map&quot;">​</a></h3><p>提供源代码到打包后代码的映射关系(如果构建后代码出错了,通过映射可以追踪源代码错误)</p><p>有很多种模式,这里开发版本推荐 <code>eval-source-map / eval-cheap-module-souce-map</code> 生产环境推荐 <code>source-map / cheap-module-souce-map</code>或者生产模式直接不要加入映射</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">devtool</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eval-source-map</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="oneof" tabindex="-1">oneOf <a class="header-anchor" href="#oneof" aria-label="Permalink to &quot;oneOf&quot;">​</a></h3><p>当打包一个js文件时,其会遍历所有的 <code>loader</code> 查看是否匹配,即使其已经被某一个loader处理过, 而利用 <code>oneOf</code> 可以手动将那些只会会有一个对应上的 <code>loader</code> 放一起,那么在其中一个匹配上后就开始 下一个文件打包,提升效率</p><h3 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h3><h4 id="babel-缓存" tabindex="-1">babel 缓存 <a class="header-anchor" href="#babel-缓存" aria-label="Permalink to &quot;babel 缓存&quot;">​</a></h4><p><code>cacheDirectory: true</code> 让第二次打包构建速度更快</p><h4 id="文件资源缓存" tabindex="-1">文件资源缓存 <a class="header-anchor" href="#文件资源缓存" aria-label="Permalink to &quot;文件资源缓存&quot;">​</a></h4><ul><li><p>hash 每次wepack构建时会生成一个唯一的hash值, 但是重新打包会生成新的hash值,导致缓存失效(即使只改动一个代码)</p></li><li><p>chunkhash 根据模块生成的hash值,如果打包来源于同一个chunk那么hash值是一样的</p></li><li><p>contenthash 根据文件的内容生成hash值,不同文件hash值一定不一样,且没有发生更改重新打包也不会更改hash值</p></li></ul><h3 id="tree-shaking" tabindex="-1">tree-shaking <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;tree-shaking&quot;">​</a></h3><p>使用前提:</p><ol><li>使用ES6模块化</li><li>开启production 环境</li></ol><p>注意: 需要在 <code>package.json</code> 文件中设置 <code>&quot;sideEffects&quot;: [&quot;*.css&quot;, &quot;*.less&quot;]</code> 用来屏蔽对样式文件的树摇</p><h3 id="code-split" tabindex="-1">code-split <a class="header-anchor" href="#code-split" aria-label="Permalink to &quot;code-split&quot;">​</a></h3><ol><li>可以将node_modules中代码单独打包一个chunk最终输出(也就是将第三方包和本项目代码剥离)</li><li>自动分析多入口chunk中,有没有公共的文件. 如果有会打包成单独一个chunk,而不是每个入口文件都单独引入了目标库</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><h3 id="懒加载-预加载" tabindex="-1">懒加载 &amp; 预加载 <a class="header-anchor" href="#懒加载-预加载" aria-label="Permalink to &quot;懒加载 &amp; 预加载&quot;">​</a></h3><ul><li>懒加载: 当文件需要使用时才加载</li><li>预加载: 一般会在使用之前提前加载js文件(等其他资源加载完毕,浏览器空闲了再偷偷加载资源)</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">import</span><span style="color:#F07178;">(</span><span style="color:#676E95;font-style:italic;">/* webpackChunkName: &#39;test&#39;, webpackPrefetch: true */</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">mul</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">mul</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="多进程打包" tabindex="-1">多进程打包 <a class="header-anchor" href="#多进程打包" aria-label="Permalink to &quot;多进程打包&quot;">​</a></h3><p>开启多进程打包,进程启动大概为600ms进程通信也有开销. 只有工作消耗时间比较长,才需要多进程打包</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">thread-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">options</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">workers</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 进程2个</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><h3 id="externals" tabindex="-1">externals <a class="header-anchor" href="#externals" aria-label="Permalink to &quot;externals&quot;">​</a></h3><p>选择哪个库不进行打包(通过cdn引入的资源可以选择不进行打包)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">externals</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">jquery</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jQuery</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><h3 id="dll" tabindex="-1">dll <a class="header-anchor" href="#dll" aria-label="Permalink to &quot;dll&quot;">​</a></h3><p>如果版本不易发生更改的库,可以先把它打包缓存起来,当运行命令打包项目时不会对目标库再次打包,而是 去拿那个缓存的包</p><h3 id="优先处理" tabindex="-1">优先处理 <a class="header-anchor" href="#优先处理" aria-label="Permalink to &quot;优先处理&quot;">​</a></h3><p>当一个文件要被多个loader处理,最好指定loader执行的先后顺序, 否则执行顺序可能不是预期的,如果没有指定执行顺序默认是从下往上的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">less</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">less-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">enforce</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// pre 优先处理</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// normal 正常处理（默认）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// inline 其次处理</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// post 最后处理</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>此模板做了一个类似于 <code>vue-cli</code> 对于环境变量处理的小东西,以下是其的使用场景以及规则</p><p>场景: 需要创建一个 <code>qa</code> 的环境,而且有一些变量是在此环境中 步骤:</p><ol><li>package.json 中添加打包或者运行规则,加入 cross-env BUILD_ENV=qa</li><li>在config文件夹下创建 <code>.env.qa</code> 文件,并在其中编写你的变量</li></ol><p>注意: 如果第一步不指定 BUILD_ENV, 那么默认为 BUILD_ENV=development</p><h2 id="环境变量相关备注" tabindex="-1">环境变量相关备注 <a class="header-anchor" href="#环境变量相关备注" aria-label="Permalink to &quot;环境变量相关备注&quot;">​</a></h2><ul><li><p>npm script 中设置 --mode production 会让内部的 p<wbr>rocess.env.NODE_ENV = &#39;production&#39; 会让内部的 mode = production</p></li><li><p>如果不设置 p<wbr>rocess.env.NODE_ENV 默认为 production</p></li><li><p>在 webpack.config.js 这样的配置文件中不能访问到 p<wbr>rocess.env.NODE_ENV</p></li><li><p>cross-env 并不能帮助我们定义浏览器中的变量,它作用是跨平台(mac,linux,window)定义可在 node环境中访问的变量</p></li><li><p>然后我们可以依赖于 cross-env 定义的变量再用 definePlugin 来定义可在浏览器中访问的变量</p></li><li><p>vuecli 的mode配置方式 [<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh/guide/mode-and-env.html</a>] (<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh/guide/mode-and-env.html</a>)</p></li></ul>`,72),o=[p];function t(c,r,i,F,y,d){return l(),a("div",null,o)}const u=s(e,[["render",t]]);export{D as __pageData,u as default};
