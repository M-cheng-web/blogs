import{_ as a,c as s,o as l,N as e}from"./chunks/framework.78c68b71.js";const C=JSON.parse('{"title":"css","description":"","frontmatter":{},"headers":[],"relativePath":"web-basics/css/core.md","lastUpdated":1676173768000}'),o={name:"web-basics/css/core.md"},n=e(`<h1 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h1><h2 id="行内元素-块级元素" tabindex="-1">行内元素/块级元素 <a class="header-anchor" href="#行内元素-块级元素" aria-label="Permalink to &quot;行内元素/块级元素&quot;">​</a></h2><p>行内: a img span b strong input select</p><p>块级: div p table ul lo li h1-h6</p><p>俩者的区别</p><ol><li>行内元素会在一条直线上排列(默认宽度只与内容相关)</li><li>块级元素各占据一行(默认宽度是它父级容器的100%)</li><li>块级元素可以包含行内元素和块级元素,行内元素不能包含块级元素,只能包含文本或者其它行内元素(如果包含了会出现溢出的情况,且本身宽高不会扩大)</li><li>行内元素设置<code>width</code>,<code>height</code>,<code>margin上下</code>,<code>padding上下</code>都是无效的</li></ol><h2 id="css选择器以及优先级" tabindex="-1">css选择器以及优先级 <a class="header-anchor" href="#css选择器以及优先级" aria-label="Permalink to &quot;css选择器以及优先级&quot;">​</a></h2><ul><li>!important</li><li>内联样式（1000）</li><li>ID选择器（0100）</li><li>类选择器/属性选择器/伪类选择器（0010）</li><li>元素选择器/伪元素选择器（0001）</li><li>关系选择器/通配符选择器（0000）</li></ul><h2 id="div的宽高" tabindex="-1">div的宽高 <a class="header-anchor" href="#div的宽高" aria-label="Permalink to &quot;div的宽高&quot;">​</a></h2><p>div的宽高 = width + padding + border<br> 如果padding大了或者是border很大,只会往外部扩展,不会压缩内部设置的width</p><ol><li>行内元素的宽高: 高度是由行高决定的,宽度=内容+border+margin+padding</li><li>块级元素的宽高: 高度是由内部文档流元素的高度总和,宽度默认为父元素的100%</li></ol><h2 id="清除浮动" tabindex="-1">清除浮动 <a class="header-anchor" href="#清除浮动" aria-label="Permalink to &quot;清除浮动&quot;">​</a></h2><ul><li>父级 <code>overflow: hidden</code></li><li>子级末尾添加元素以及设置样式 <code>clear: both</code></li><li>父级添加伪元素</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><p>CSS将HTML的每一个元素都当成一个盒子,而且它进一步的认为每一个盒子里面都有一套正常的语法规则或者叫渲染规则,它能根据这个规则将写的HTML元素绘制出来,但是我们可以通过一些特定的手段触发BFC,让其遵循另一套语法规则</p><p><strong>可以说BFC就是一个作用范围，把它理解成是一个独立的容器，并且这个容器里box的布局与这个容器外的box毫不相干</strong></p><p>解决了这些问题:</p><ol><li>垂直外边距重叠问题</li><li>去除浮动</li></ol><p>触发BFC</p><ul><li>float: left/right</li><li>overflow: hidden (父级设置)</li><li>position: absolute/fixed (父级设置)</li><li>display: inline-block (父级设置)</li></ul><h2 id="margin-塌陷" tabindex="-1">margin 塌陷 <a class="header-anchor" href="#margin-塌陷" aria-label="Permalink to &quot;margin 塌陷&quot;">​</a></h2><p>父子级关系中子级 <code>margin-top</code> 会导致作用到父级上,解决:</p><ol><li>子级用padding</li><li>父级添加 border</li><li>父级添加 overflow: hidden</li><li>父级添加 position: fixed/absolute</li></ol><p>兄弟级关系中,垂直方向的互相 <code>margin-bottom margin-top</code> 会导致重叠,解决:</p><ol><li>用padding避免</li><li>设置 float: left/right</li></ol><h2 id="自适应" tabindex="-1">自适应 <a class="header-anchor" href="#自适应" aria-label="Permalink to &quot;自适应&quot;">​</a></h2><ul><li>媒体查询 @media 适合小型网页,交互较少的页面,页面多了不方便维护</li><li>GitHub上有个项目,将vue分为移动端和手机端</li><li>rem vm vh (搭配媒体查询来达到动态适配)</li></ul><h2 id="rem" tabindex="-1">rem <a class="header-anchor" href="#rem" aria-label="Permalink to &quot;rem&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>可以通过 px2rem loader来达到在项目中还是正常使用 px,打包的时候会替换成 rem <br></p><p>也可以通过 cssrem vscode插件的方式达到在书写样式的时候写上px能给出rem的提示</p></div><p>rem单位都是相对于根元素html的 <code>font-size</code> 来决定大小的,通过媒体查询或者监听页面的窗口变化事件来动态更改这个 <code>font-size</code> (font-size默认为 16px,也就是设置<code>font-size = 62.5%</code>的话,<code>1rem = 10px</code>)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">font-size = 20 * (clientWidth / 375) + &#39;px&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">==&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">在 375 屏中 1rem = 20px,往后就会根据这个动态调整</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="vm" tabindex="-1">vm <a class="header-anchor" href="#vm" aria-label="Permalink to &quot;vm&quot;">​</a></h2><p>vm表示的是相对于屏幕的百分之一宽度,还有vh是百分之一高度,用以解决多层元素带来的百分号不确定关系</p>`,34),i=[n];function t(p,c,r,d,h,m){return l(),s("div",null,i)}const D=a(o,[["render",t]]);export{C as __pageData,D as default};
